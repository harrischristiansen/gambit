# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import gambit_pb2 as gambit__pb2


class GameServiceStub(object):
  """GameService is the game host server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExecuteMatch = channel.stream_stream(
        '/gambit.GameService/ExecuteMatch',
        request_serializer=gambit__pb2.ExecuteMatchRequest.SerializeToString,
        response_deserializer=gambit__pb2.ExecuteMatchResponse.FromString,
        )


class GameServiceServicer(object):
  """GameService is the game host server.
  """

  def ExecuteMatch(self, request_iterator, context):
    """ExecuteMatch is a long-lived session for queuing and playing a match as a player.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExecuteMatch': grpc.stream_stream_rpc_method_handler(
          servicer.ExecuteMatch,
          request_deserializer=gambit__pb2.ExecuteMatchRequest.FromString,
          response_serializer=gambit__pb2.ExecuteMatchResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gambit.GameService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
